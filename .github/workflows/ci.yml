name: "Build environment"
on:
  push:
jobs:
  ghc:
    strategy:
      matrix:
        ghc: ['865', '884', '8104', '8105', '901']
    name: "ghc${{ matrix.ghc }}"
    runs-on: macos-latest
    steps:
    - name: Checkout nix-dotenv
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install nix
      uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
        extra_nix_config: |
          trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= s3.kdevlab.com:PhuKrzVfCsS0T1R4FnslJy2qUBul9oQ2CTSO/fg/llM= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
          substituters = https://hydra.iohk.io https://nix-cache.s3.kdevlab.com https://cache.nixos.org/
    - name: Install nix-cache-tools
      run: |
        nix-env -i -f ./nixpkgs/nix-cache-tools
    - name: Show nixpkgs version
      run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'
    - name: Build ghc.nix
      run: |
        nix -j $(sysctl -n hw.logicalcpu) --print-build-logs --show-trace build -f ghc.nix --argstr "version" "${{ matrix.ghc }}"
    - name: Show builded paths
      run: |
        nix --print-build-logs path-info -f ghc.nix --argstr "version" "${{ matrix.ghc }}"
    - name: Upload cache
      run: |
        all-nix-deps $(readlink result) | xargs -P8 upload-nix
        rm -f result
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        NIX_UPLOAD_STORE_URL: 's3://nix-cache?endpoint=s3.kdevlab.com'
        NIX_UPLOAD_SECRET_KEY: ${{ secrets.CACHE_PRIVATE_KEY }}
  hls:
    strategy:
      matrix:
        ghc: ['865', '884', '8104', '8105', '901']
    needs: [ghc]
    name: "hls-ghc${{ matrix.ghc }}"
    runs-on: macos-latest
    steps:
    - name: Checkout nix-dotenv
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install nix
      uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
        extra_nix_config: |
          trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= s3.kdevlab.com:PhuKrzVfCsS0T1R4FnslJy2qUBul9oQ2CTSO/fg/llM= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
          substituters = https://hydra.iohk.io https://nix-cache.s3.kdevlab.com https://cache.nixos.org/
    - name: Install nix-cache-tools
      run: |
        nix-env -i -f ./nixpkgs/nix-cache-tools
    - name: Show nixpkgs version
      run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'
    - name: Build hls.nix
      run: |
        nix -j $(sysctl -n hw.logicalcpu) --print-build-logs --show-trace build -f hls.nix --argstr "version" "${{ matrix.ghc }}"
    - name: Show builded paths
      run: |
        nix --print-build-logs path-info -f hls.nix --argstr "version" "${{ matrix.ghc }}"
    - name: Upload cache
      run: |
        all-nix-deps $(readlink result) | xargs -P8 upload-nix
        rm -f result
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        NIX_UPLOAD_STORE_URL: 's3://nix-cache?endpoint=s3.kdevlab.com'
        NIX_UPLOAD_SECRET_KEY: ${{ secrets.CACHE_PRIVATE_KEY }}
  build:
    needs: [hls]
    name: "build"
    runs-on: macos-latest
    steps:
    - name: Get current time
      uses: 1466587594/get-current-time@v2
      id: current-time
      with:
        format: YYYY-MM-DD HH:mm:ss
    - name: Checkout nix-dotenv
      uses: actions/checkout@v2
      with:
        path: environment
        fetch-depth: 0
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v3
      with:
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        git-user-signingkey: true
        git-commit-gpgsign: true
        workdir: environment
    - name: Install nix
      uses: cachix/install-nix-action@v12
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
        extra_nix_config: |
          trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= s3.kdevlab.com:PhuKrzVfCsS0T1R4FnslJy2qUBul9oQ2CTSO/fg/llM= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
          substituters = https://hydra.iohk.io https://nix-cache.s3.kdevlab.com https://cache.nixos.org/
    - name: Add nix channels
      run: |
        nix-env -iA jq -f https://github.com/NixOS/nixpkgs/archive/nixpkgs-unstable.tar.gz
        nix-channel --add https://github.com/miuirussia/nixpkgs/archive/nixpkgs-unstable.tar.gz nixpkgs
        nix-channel --add https://github.com/miuirussia/home-manager/archive/master.tar.gz home-manager
        nix-channel --update
    - name: Install nix-cache-tools
      run: |
        nix-env -i -f ./environment/nixpkgs/nix-cache-tools
    - name: Show nixpkgs version
      run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'
    - name: Save pre-build state
      run: |
        nix path-info --all | grep -v '\.drv$' > /tmp/store-path-pre-build
      working-directory: environment
    - name: Checkout dotfiles
      uses: actions/checkout@v2
      with:
        path: dotfiles
        repository: miuirussia/dotfiles
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        persist-credentials: true
        fetch-depth: 0
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v3
      with:
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        git-user-signingkey: true
        git-commit-gpgsign: true
        workdir: dotfiles
    - name: Copy updated files
      run: |
        rm -rf ./dotfiles/nix/sources/*.patch || true
        rm -rf ./dotfiles/nix/programs/neovim/patches || true
        rm -rf ./dotfiles/nix/nixpkgs/{vscode,jetbrains-mono,build-support,tmuxinator} || true
        rm -rf ./dotfiles/nix/nixpkgs/{mkHlsPkgs.nix,hls.nix} || true
        cp -f  ./environment/sources/{default.nix,sources.nix,sources.json,*.patch} ./dotfiles/nix/sources
        cp -rf ./environment/neovim/{custom-plugins.nix,patches} ./dotfiles/nix/programs/neovim
        cp -rf ./environment/nixpkgs/{nix-cache-tools,package.nix,vscode,jetbrains-mono,build-support,tmuxinator} ./dotfiles/nix/nixpkgs
        cp -f  ./environment/nixpkgs/nodePackages/{default.nix,node-env.nix,node-packages.json,node-packages.nix} ./dotfiles/nix/nixpkgs/nodePackages
    - name: Build home-manager
      run: |
        export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
        nix-shell '<home-manager>' -A install
        cp -f ./nix/user{.example,}.nix
        export XDG_CONFIG_HOME=$(pwd)
        home-manager --max-jobs auto -f ./nix/home.nix build
      working-directory: dotfiles
      env:
        NIX_CURL_FLAGS: "--header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'"
    - name: Upload cache
      run: |
        all-nix-deps $(readlink result) | xargs -P8 upload-nix
        rm -f result
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        NIX_UPLOAD_STORE_URL: 's3://nix-cache?endpoint=s3.kdevlab.com'
        NIX_UPLOAD_SECRET_KEY: ${{ secrets.CACHE_PRIVATE_KEY }}
      working-directory: dotfiles
    - name: Get commit message
      run: |
        echo "commitmsg=$(git log --format=%B -n 1 ${{ github.event.after }})" >> $GITHUB_ENV
      working-directory: environment
    - name: Show commit message
      run : echo $commitmsg
    - name: Commit updated files
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: ${{ env.commitmsg }}
        repository: dotfiles
    - name: Notify in telegram
      if: cancelled() == false
      uses: xinthink/action-telegram@v1.1
      with:
        chatId: ${{ secrets.TELEGRAM_BOT_CHANNEL }}
        botToken: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        jobStatus: ${{ job.status }}
        skipSuccess: false
